<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ctrls="clr-namespace:PP.Wpf.Controls"
                    xmlns:attach="clr-namespace:PP.Wpf.Controls.Attach"
                    xmlns:cvts="clr-namespace:PP.Wpf.Converters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    mc:Ignorable="options">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/PP.Wpf;component/Styles/Controls.Button.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="PP.Styles.ComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="MinHeight" Value="{DynamicResource ComboBoxItem.MinHeight}" />
        <Setter Property="Padding" Value="{Binding Padding,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ItemsControl}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="{DynamicResource ComboBoxItem.Background}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ComboBoxItem.Background.Hover}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ComboBoxItem.Background.Select}" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <ControlTemplate x:Key="PP.Templates.ComboBox.SelectOnly" TargetType="{x:Type ComboBox}">
        <ctrls:SimplePanel>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Unfocused" />
                    <VisualState x:Name="FocusedDropDown">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:.2" To="-1" Storyboard.TargetName="icon" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                <DoubleAnimation.EasingFunction>
                                    <CircleEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" IsHitTestVisible="False">
                <DockPanel>
                    <Path x:Name="icon" DockPanel.Dock="Right" Data="{TemplateBinding attach:IconElement.Geometry}" Stretch="Uniform" Fill="{TemplateBinding attach:IconElement.Brush}"
                          Width="{TemplateBinding attach:IconElement.Width}" Margin="{TemplateBinding attach:IconElement.Margin}" RenderTransformOrigin="0.5 0.5">
                        <Path.RenderTransform>
                            <ScaleTransform />
                        </Path.RenderTransform>
                    </Path>
                    <ctrls:SimplePanel Margin="{TemplateBinding Padding}">
                        <TextBlock x:Name="placeholder" Text="{TemplateBinding attach:TextElement.Placeholder}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                   Visibility="{Binding Text,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static cvts:StringToVisibilityConverter.EmptyToVisible}}"
                                   Opacity="0.6" IsHitTestVisible="False" />
                        <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </ctrls:SimplePanel>
                </DockPanel>
            </Border>
            <ToggleButton Style="{DynamicResource PP.Styles.Button.TransparentBase}" Focusable="False" IsTabStop="False" ClickMode="Press"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Popup x:Name="PART_Popup" Placement="Bottom" AllowsTransparency="true" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   VerticalOffset="2" PopupAnimation="Slide" MinWidth="{TemplateBinding ActualWidth}">
                <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ComboBox.Popup.BorderBrush}" BorderThickness="1" 
                        Background="{DynamicResource ComboBox.Popup.Background}" CornerRadius="{DynamicResource ComboBox.Popup.CornerRadius}">
                    <ctrls:CornerClip CornerRadius="{DynamicResource ComboBox.Popup.CornerRadius}">
                        <ScrollViewer x:Name="DropDownScrollViewer" HorizontalScrollBarVisibility="Disabled">
                            <StackPanel>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </ScrollViewer>
                    </ctrls:CornerClip>
                </Border>
            </Popup>
        </ctrls:SimplePanel>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Gnt.Brushes.Themes70}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(attach:BorderElement.HoverBorderBrush),RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="placeholder" Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(attach:BorderElement.FocusBorderBrush),RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="placeholder" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="attach:TextElement.IsError" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Gnt.Brushes.Warning}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="PP.Templates.ComboBox.Editable" TargetType="{x:Type ComboBox}">
        <ctrls:SimplePanel>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Unfocused" />
                    <VisualState x:Name="FocusedDropDown">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:.2" To="-1" Storyboard.TargetName="icon" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                <DoubleAnimation.EasingFunction>
                                    <CircleEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <DockPanel>
                    <ToggleButton DockPanel.Dock="Right" Style="{DynamicResource PP.Styles.Button.TransparentBase}" Focusable="False" IsTabStop="False" ClickMode="Press"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <Path x:Name="icon" Data="{TemplateBinding attach:IconElement.Geometry}" Stretch="Uniform" Fill="{TemplateBinding attach:IconElement.Brush}"
                              Width="{TemplateBinding attach:IconElement.Width}" Margin="{TemplateBinding attach:IconElement.Margin}" 
                              IsHitTestVisible="False" RenderTransformOrigin="0.5 0.5">
                            <Path.RenderTransform>
                                <ScaleTransform />
                            </Path.RenderTransform>
                        </Path>
                    </ToggleButton>
                    <ctrls:SimplePanel Margin="{TemplateBinding Padding}">
                        <TextBlock x:Name="placeholder" Text="{TemplateBinding attach:TextElement.Placeholder}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                   Visibility="{Binding Text,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static cvts:StringToVisibilityConverter.EmptyToVisible}}"
                                   Opacity="0.6" IsHitTestVisible="False" />
                        <TextBox x:Name="PART_EditableTextBox" BorderThickness="0" Background="Transparent" Padding="0" Foreground="{TemplateBinding Foreground}" CaretBrush="{TemplateBinding Foreground}"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </ctrls:SimplePanel>
                </DockPanel>
            </Border>
            <Popup x:Name="PART_Popup" Placement="Bottom" AllowsTransparency="true" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   VerticalOffset="2" PopupAnimation="Slide" MinWidth="{TemplateBinding ActualWidth}">
                <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ComboBox.Popup.BorderBrush}" BorderThickness="1" 
                        Background="{DynamicResource ComboBox.Popup.Background}" CornerRadius="{DynamicResource ComboBox.Popup.CornerRadius}">
                    <ctrls:CornerClip CornerRadius="{DynamicResource ComboBox.Popup.CornerRadius}">
                        <ScrollViewer x:Name="DropDownScrollViewer" HorizontalScrollBarVisibility="Disabled">
                            <StackPanel>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </ScrollViewer>
                    </ctrls:CornerClip>
                </Border>
            </Popup>
        </ctrls:SimplePanel>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(attach:BorderElement.HoverBorderBrush),RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="placeholder" Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(attach:BorderElement.FocusBorderBrush),RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="placeholder" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="attach:TextElement.IsError" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Gnt.Brushes.Warning}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="PP.Styles.ComboBox" TargetType="{x:Type ComboBox}">
        <Style.Resources>
            <SolidColorBrush x:Key="ComboBox.Popup.Background" Color="White" options:Freeze="True" />
            <SolidColorBrush x:Key="ComboBox.Popup.BorderBrush" Color="#AAA" options:Freeze="True" />
            <CornerRadius x:Key="ComboBox.Popup.CornerRadius">0</CornerRadius>
            <sys:Double x:Key="ComboBoxItem.MinHeight">30</sys:Double>
            <SolidColorBrush x:Key="ComboBoxItem.Background" Color="Transparent" options:Freeze="True" />
            <SolidColorBrush x:Key="ComboBoxItem.Background.Hover" Color="#F2F2F2" options:Freeze="True" />
            <SolidColorBrush x:Key="ComboBoxItem.Background.Select" Color="#DCDCDC" options:Freeze="True" />
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource PP.Brushes.White}" />
        <Setter Property="Foreground" Value="{DynamicResource PP.Brushes.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource PP.Brushes.Black50}" />
        <Setter Property="attach:BorderElement.HoverBorderBrush" Value="{DynamicResource PP.Brushes.Themes70}" />
        <Setter Property="attach:BorderElement.FocusBorderBrush" Value="{DynamicResource PP.Brushes.Themes}" />
        <Setter Property="Padding" Value="6 3" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="attach:IconElement.Geometry" Value="{DynamicResource PP.Pathes.DropDown}" />
        <Setter Property="attach:IconElement.Width" Value="12" />
        <Setter Property="attach:IconElement.Brush" Value="{DynamicResource PP.Brushes.Black60}" />
        <Setter Property="attach:IconElement.Margin" Value="4 0 10 0" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource PP.Styles.ComboBoxItem}" />
        <Setter Property="Template" Value="{StaticResource PP.Templates.ComboBox.SelectOnly}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="Template" Value="{StaticResource PP.Templates.ComboBox.Editable}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource PP.Styles.ComboBox}"></Style>

</ResourceDictionary>